/**
 * 
 * Automail v1.0
 * 
 * This script sends out e-mails in batches.
 * 
 * @function sendMail       determines input range;
 *                          loops through this range, assigning information to variables such as e-mailaddress, invoice number, subject and message; and
 *                          uses input on these variables to send out an e-mail (using MailApp).
 *  
 * @function archive        archives values on input sheet in a separate sheet after being sent.
 * d
 *
 * @function executeAll     executes @sendMail; and 
 *                          @archive consequently.
 */

// @param {object} ss - calls the active spreadsheet (Mailing Console.gsheet).
var ss = SpreadsheetApp.getActiveSpreadsheet();

function sendMail() {

	// @param {object} sheet - calls sheet: 'Verzendopdrachten'.
	var sheet = ss.getSheetByName("Verzendopdrachten");

	// @param {number} startRow - first row of data.
	var startRow = 2;

	// @param {number} numRows - equals output from getLastRow() minus 1.
	var numRows = sheet.getLastRow() - 1; // determines length of loop

	// @param {object}
	var dataRange = sheet.getRange(startRow, 1, numRows, 6);

	// Fetches values for each row in dataRange
	// Appends values into array
	var data = dataRange.getValues();

	// Looper iterates through rows by adding the loop variable (i, equals the row number) to the starting value (0) as long as {i < total number of rows}.
	for (var i = 0; i < data.length; i++) {
		var row = data[i]; // 
		var emailAddress = row[1]; // Second column: e-mailaddress
		var invoiceNo = row[2]; // Third column: invoice number
		var company = row[3]; // Fifth column: consigning company
		var language = row[4]; // Fourth column: language used for message

		// Allows to switch the subject to English. 
		// Default = Dutch.
		if (language === "EN") {
			var subject = `Action required - invoice ${invoiceNo}`
		} else {
			var subject = `Actie vereist - factuur ${invoiceNo}`
		};

		// Get HTML-template
		var htmlTemplate; // variable to save template to

		// If-statement below sets the language for the message, based on the language specified in Column D.
		// mail_en and mail_nl are html-files imported using Google's HtmlService
		if (language === "Stuur de mail in het Engels.") {
			htmlTemplate = HtmlService.createTemplateFromFile('mail_en')
		} else {
			htmlTemplate = HtmlService.createTemplateFromFile('mail_nl')
		};

		// Evaluate the html-file and retrieve its contents
		// Save contents to var 'text'
		var text = htmlTemplate
			.evaluate()
			.getContent();

		// MailApp.sendEmail allows to send emails based on earlier defined variables.  
		// parameters 
		MailApp.sendEmail(
			emailAddress, // retrieves emailaddress from variable
			subject, // retrieves subject from variable
			'', {
				htmlBody: text, // retrieves body
				bcc: 'xxx@pon.com', // blind cc send to Accounts Payable for archiving purposes.
				noReply: true // sends email using noreply@pon.com
			});
		sheet.getRange(startRow + i, 6).setValue("EMAIL_SENT"); // assigns status 'EMAIL_SENT to column F.
		Logger.log(`Factuur ${invoiceNo} is verzonden`); // Log message
	};
};

function archive() {

	// archives input in 'Verzendopdrachten'
	var input = ss.getSheetByName("Verzendopdrachten");

	// first row in 'Verzendopdrachten' to consider
	var startRow = 2;

	var inputlr = input.getLastRow() - 1; // defines last row in input sheet.
	var inputRange = input.getRange(startRow, 1, inputlr, 6) // defines input range: (first row x first column, last row x sixth column)
	var inputData = inputRange.getValues(); // saves values from inputRange to var inputData

	var output = ss.getSheetByName("Archief");
	var outputlr = output.getLastRow() + 1;
	var outputRange = output.getRange(outputlr, 1, inputlr, 6);

	outputRange.setValues(inputData);
	input.deleteRows(startRow, inputlr);

	// set timestamp to sheet 'Archief';
	var output = ss.getSheetByName("Archief");
	var stampCell = output.getRange(outputlr, 6, inputlr, 1);

	if (stampCell.getColumn() == 6) { // checks that the cell being edited is in column A
		var nextCell = stampCell.offset(0, 1);
		if (nextCell.getValue() === '') // checks if the adjacent cell is empty or not
			nextCell.setValue(new Date());
	};
};

function executeAll() {
	// only call this function from the sheet itself.
	// accesses user interface of SpreadsheetApp and creates a custom menu that requests the user for confirmation.

	SpreadsheetApp.getUi()
		.createMenu('Custom Menu')
		.addItem('Show alert', 'showAlert')
		.addToUi();

	var ui = SpreadsheetApp.getUi();
	var result = ui.alert(
		'Nog één keer bevestigen:',
		'Weet je zeker dat je wilt doorgaan?',
		ui.ButtonSet.YES_NO);
	// Process the user's response.

	// User clicked "Yes". Runs full script.
	if (result == ui.Button.YES) {

		sendMail();
		archive();
		var emptyArchive = ss.getSheetByName("Verzendopdrachten").getLastRow();
		if (emptyArchive = 1) {
			SpreadsheetApp.getUi().alert("E-mails sent and archived!");
		} else {
			// User clicked "No" or X in the title bar.
			ui.alert('Permission denied.')
		};
	};
};
